#!/command/with-contenv bash

source /assets/functions/00-container
source /assets/defaults/10-unit

if [ -z "${1}" ]; then
   cat <<EOF
   Tired of I.T! Unit Configuration Tool
   Usage: $(basename $0) (clear|edit|import|show|stats|test) args <silent>

   Example:

   $(basename $0) clear - Clears configuration
   $(basename $0) edit - Opens an editor with all configuration and upon save reimports
   $(basename $0) import - Imports a file to configuration (will overwrite all info unless you use import args)
   $(basename $0) show - Shows all running configuration
   $(basename $0) stats - Runtime Statistics
   $(basename $0) test - Test connectivity to control socket

   Add 'silent' to the end of each option to make zero output occur..

EOF
   exit
fi

EDITOR=${EDITOR:-"nano"}

case "${UNIT_CONTROL_TYPE,,}" in
    ip)
        _unit_control="http://${_unit_control}/config"
    ;;
    socket)
        _unit_control="--unix-socket $(echo "${_unit_control}" | sed "s|unix:/||g") http://tiredofit/config"
    ;;
esac

case "${1,,}" in
    clear)
        if [ "${2}" = "silent" ]; then _prefix=silent; fi
        ${_prefix} curl -X DELETE ${_unit_control}
    ;;
    import )
        if [ -n "${2}" ]; then
            if [ "${3}" = "silent" ]; then _prefix=silent; fi
            case "${2}" in
                access_log)
                    ${_prefix} curl -X PUT --data-binary @/etc/unit/snippets/access_log/${UNIT_LOG_ACCESS_FORMAT,,}.json ${_unit_control}/access_log
                ;;
                unit)
                    ${_prefix} curl -X PUT --data-binary @/etc/unit/snippets/unit.json ${_unit_control}/settings
                ;;
                sites)
                    # Applications and Routes need to go before listeners otherwise face a listener error!
                    if compgen -G "/etc/unit/sites.enabled/*-application.json" >/dev/null ; then
                        for site_application in /etc/unit/sites.enabled/*-application.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_application} ${_unit_control}/applications
                        done
                    fi
                    if compgen -G "/etc/unit/sites.enabled/*-route.json" >/dev/null ; then
                        for site_route in /etc/unit/sites.enabled/*-route.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_route} ${_unit_control}/routes
                        done
                    fi
                    if compgen -G "/etc/unit/sites.enabled/*-upstream.json" >/dev/null ; then
                        for site_upstream in /etc/unit/sites.enabled/*-upstream.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_upstream} ${_unit_control}/upstreams
                        done
                    fi
                    if compgen -G "/etc/unit/sites.enabled/*-listener.json" >/dev/null ; then
                        for site_listener in /etc/unit/sites.enabled/*-listener.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_listener} ${_unit_control}/listeners
                        done
                    fi
                ;;
                all)
                    ${_prefix} curl -X PUT --data-binary @/etc/unit/snippets/unit.json ${_unit_control}/settings
                    ${_prefix} curl -X PUT --data-binary @/etc/unit/snippets/logformat/${UNIT_LOG_ACCESS_FORMAT,,}.json ${_unit_control}/access_log

                    # Applications and Routes need to go before listeners otherwise face a listener error!
                    if compgen -G "/etc/unit/sites.enabled/*-application.json" >/dev/null ; then
                        for site_application in /etc/unit/sites.enabled/*-application.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_application} ${_unit_control}/applications
                        done
                    fi
                    if compgen -G "/etc/unit/sites.enabled/*-route.json" >/dev/null ; then
                        for site_route in /etc/unit/sites.enabled/*-route.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_route} ${_unit_control}/routes
                        done
                    fi
                    if compgen -G "/etc/unit/sites.enabled/*-upstream.json" >/dev/null ; then
                        for site_upstream in /etc/unit/sites.enabled/*-upstream.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_upstream} ${_unit_control}/upstreams
                        done
                    fi
                    if compgen -G "/etc/unit/sites.enabled/*-listener.json" >/dev/null ; then
                        for site_listener in /etc/unit/sites.enabled/*-listener.json; do
                            ${_prefix} curl -X PUT --data-binary @${site_listener} ${_unit_control}/listeners
                        done
                    fi
                ;;
                *)
                    if [ -f "${2}" ]; then
                        echo "** Importing ${2} to Unit Configuration"
                        ${_prefix} curl -X PUT --data-binary @${2} ${_unit_control}
                    else
                        echo "** Import file ${2} does not exist! Exiting.."
                        exit 99
                    fi
                ;;
            esac
        else
            echo "** Nothing to import"
        fi
    ;;
    edit)
        now="$(TZ=$TIMEZONE date '+%Y%m%d-%H%M%S')"
        _tmp_unit_config=$(mktemp)
        if [ "${2}" = "silent" ]; then _prefix=silent; fi
        ${_prefix} curl -sX GET ${_unit_control} > "${_tmp_unit_config}"
        cp "${_tmp_unit_config}" /tmp/"${now}"-unit.json
        echo "** Editing existing config. Backup copy saved at /tmp/${now}-unit.json"
        _tmp_unit_config_md5_orig="$(md5sum "${_tmp_unit_config}")"
        "${EDITOR}" "${_tmp_unit_config}"
        _tmp_unit_config_md5_edit="$(md5sum "${_tmp_unit_config}")"
        if [ "${_tmp_unit_config_md5_orig}" != "${_tmp_unit_config_md5_edit}" ]; then
            echo "** Importing to Unit Configuration"
            ${_prefix} curl -sX DELETE ${_unit_control}
            ${_prefix} curl -sX PUT --data-binary @${_tmp_unit_config} ${_unit_control}
        else
            echo "** Skipping Importing as file contents are the same"
        fi
        rm -rf "${_tmp_unit_config}"
    ;;
    show)
        curl -s -X GET ${_unit_control} | yq . -o json
    ;;
    stat*)
        curl -s -X GET $(echo ${_unit_control} | sed "s|/config|/status|g")
    ;;
    test)
        if [ "${2}" = "silent" ]; then _prefix=silent; fi
        ${_prefix} curl -s -X GET ${_unit_control} > /dev/null 2>&1
        test_exitcode=$?
        if [ "${test_exitcode}" = 0 ]; then
            ${prefix} echo "** Control Socket is available"
            exit
        else
            ${prefix} echo "** Control Socket is unavailable"
            exit 88
        fi
    ;;
esac
