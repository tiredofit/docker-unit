#!/command/with-contenv bash

unit_bootstrap_filesystem() {
    if [ ! -d "${UNIT_CONTROL_SOCKET_PATH}" ]; then
        mkdir -p "${UNIT_CONTROL_SOCKET_PATH}"
    fi
    if [ "$(stat -c %U "${UNIT_CONTROL_SOCKET_PATH}")" != "${UNIT_USER}" ] ; then silent chown "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_CONTROL_SOCKET_PATH}" ; fi

    if [ "${UNIT_LOG_TYPE,,}" = "file" ]; then
        if [ ! -d "${UNIT_LOG_PATH}" ]; then
            mkdir -p "${UNIT_LOG_PATH}"
        fi

        if [ "$(stat -c %U "${UNIT_LOG_PATH}")" != "${UNIT_USER}" ] ; then chown "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_LOG_PATH}" ; fi
        touch "${UNIT_LOG_PATH}"/"${UNIT_LOG_FILE}"
        chown -R "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_LOG_PATH}"/"${UNIT_LOG_FILE}"
    fi

    if [ "${UNIT_LOG_ACCESS_TYPE,,}" = "file" ]; then
        if [ "${UNIT_LOG_ACCESS_PATH}" != "${UNIT_LOG_PATH}" ] && [ "${UNIT_LOG_ACCESS_TYPE,,}" != "none" ]; then
            if [ ! -d "${UNIT_LOG_ACCESS_PATH}" ]; then
                mkdir -p "${UNIT_LOG_ACCESS_PATH}"
            fi

            if [ "$(stat -c %U "${UNIT_LOG_ACCESS_PATH}")" != "${UNIT_USER}" ] ; then chown "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_LOG_ACCESS_PATH}" ; fi
            touch "${UNIT_LOG_ACCESS_PATH}"/"${UNIT_LOG_ACCESS_FILE}"
            chown -R "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_LOG_ACCESSPATH}"/"${UNIT_LOG_ACCESS_FILE}"
        fi
    fi

    if [ ! -d "${UNIT_MODULE_PATH}" ]; then
        mkdir -p "${UNIT_MODULE_PATH}"
    fi
    if [ "$(stat -c %U "${UNIT_MODULE_PATH}")" != "${UNIT_USER}" ] ; then silent chown "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_MODULE_PATH}" ; fi

    if [ ! -d "${UNIT_STATE_PATH}" ]; then
        mkdir -p "${UNIT_STATE_PATH}"
    fi
    if [ "$(stat -c %U "${UNIT_STATE_PATH}")" != "${UNIT_USER}" ] ; then chown "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_STATE_PATH}" ; fi
}

unit_configure_instance() {
    _unit_configure_log_format() {
        print_debug "Updating logformat settings"
        case "${UNIT_LOG_TYPE}" in
            file)
                yq -iP '.access_log.path="'$(echo "${UNIT_LOG_ACCESS_PATH}"/"${UNIT_LOG_ACCESS_FILE}")'"' /etc/unit/snippets/logformat/${UNIT_LOG_ACCESS_FORMAT,,}.json -o json
                create_logrotate unit "${UNIT_LOG_ACCESS_PATH}"/"${UNIT_LOG_ACCESS_FILE}" unit "${UNIT_USER}" "${UNIT_GROUP}"
            ;;
        esac

        case "${UNIT_LOG_ACCESS_TYPE}" in
            console)
                yq -iP '.access_log.path="/dev/stdout"' /etc/unit/snippets/logformat/${UNIT_LOG_ACCESS_FORMAT,,}.json -o json
            ;;
            file)
                yq -iP '.access_log.path="'$(echo "${UNIT_LOG_ACCESS_PATH}"/"${UNIT_LOG_ACCESS_FILE}")'"' /etc/unit/snippets/logformat/${UNIT_LOG_ACCESS_FORMAT,,}.json -o json
                create_logrotate unit-access "${UNIT_LOG_ACCESS_PATH}"/"${UNIT_LOG_ACCESS_FILE}" unit-access-"${UNIT_LOG_ACCESS_FORMAT,,}" "${UNIT_USER}" "${UNIT_GROUP}"
            ;;
            none)
                yq -iP '.access_log.path="/dev/null"' /etc/unit/snippets/logformat/${UNIT_LOG_ACCESS_FORMAT,,}.json -o json
            ;;
        esac
    }

    _unit_configure_settings() {
        print_debug "Updating unit.json settings"
        yq -iP  '
                    .http.body_read_timeout = env(UNIT_TIMEOUT_BODY_READ) |
                    .http.header_read_timeout = env(UNIT_TIMEOUT_HEADER_READ) |
                    .http.idle_timeout = env(UNIT_TIMEOUT_IDLE) |
                    .http.send_timeout = env(UNIT_TIMEOUT_BODY_SEND) |
                    .http.max_body_size = env(UNIT_MAX_BODY_SIZE) |
                    .http.discard_unsafe_fields = env(UNIT_DISCARD_UNSAFE_FIELDS) |
                    .http.log_route = env(UNIT_LOG_ROUTES) |
                    .http.server_version = env(UNIT_ENABLE_SERVER_VERSION) |
                ' /etc/unit/snippets/unit.json -o json
    }

    _unit_configure_log_format
    _unit_configure_settings

}

unit_configure_site_default() {
    if [ -z "${UNIT_SITE_ENABLED}" ] && [ ! -f "/etc/unit/sites.available/default.json" ] ; then
        yq -nP  '
                    .listeners."'$(echo "${LISTEN_IP}:${LISTEN_PORT}")'".pass="'$(echo "${UNIT_APPLICATION_NAME}")'" |
                    .[strenv(UNIT_APPLICATION_NAME)].action.share = "'$(echo "${UNIT_WEBROOT}")'/$uri"
                ' -o json > /etc/unit/sites.available/default.json
    fi
}


unit_create_sample_html() {
    if [ ! -f "${UNIT_WEBROOT}/index.html" ]; then
        print_notice "Creating sample index.html"
        mkdir -p "${UNIT_WEBROOT}"
        cat <<EOF >"${UNIT_WEBROOT}"/index.html
<html>
<title>Default Page</title>
<h2>Container is working</h2>
Congratulations! Your ${IMAGE_NAME} image is working. You are seeing this because you don't have an index.html file in your ${UNIT_WEBROOT} directory.
</html>
EOF
        chown -R "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_WEBROOT}"
    fi
}

unit_post_init() {
    mkdir -p "${UNIT_WEBROOT}"
    if var_true "${UNIT_FORCE_RESET_PERMISSIONS}" ; then
        chown -R "${UNIT_USER}":"${UNIT_GROUP}" "${UNIT_WEBROOT}"
    fi
}
